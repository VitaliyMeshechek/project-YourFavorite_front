{"version":3,"file":"static/js/330.92880b83.chunk.js","mappings":"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","sources":["components/Autorization/LoginForm/LoginForm.styled.js","components/Autorization/RegisterForm/RegisterForm.js","pages/RegisterPage/RegisterPage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport { colors, breakPoints } from 'base-styles/variables';\nimport { BsXLg, BsCheck, BsEyeSlash, BsEye } from 'react-icons/bs';\n\nexport const FormTitle = styled.h2`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 1.37;\n  color: ${colors.black};\n  text-align: center;\n  margin: 0;\n  margin-bottom: 40px;\n\n  @media screen and (min-width: ${breakPoints.tablet}) {\n    font-size: 36px;\n    line-height: 1.36;\n  }\n`;\n\nexport const Forms = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  background-color: ${colors.white};\n  gap: 24px;\n  text-align: center;\n  margin: 100px auto 0;\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n  border-radius: 20px;\n  padding: 40px 12px;\n\n  @media screen and (min-width: ${breakPoints.tablet}) {\n    padding: 60px 75px;\n    width: 608px;\n    margin: 140px auto 0;\n    border-radius: 40px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  height: 48px;\n  padding: 12px 16px;\n  font-size: 16px;\n  background-color: transparent;\n  border: 1px solid;\n  border-color: ${colors.blue};\n  border-radius: 40px;\n  outline: none;\n\n  :hover svg {\n    fill: ${colors.yellow};\n  }\n  ${props =>\n    props.valid &&\n    `border-color : ${colors.green};\n  `}\n\n  ${props =>\n    props.error &&\n    `border-color: ${colors.red};\n  `}\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  color: ${colors.gray};\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const IconButton = styled.button`\n  position: absolute;\n  border: none;\n  top: 12px;\n  right: 12px;\n  width: 30px;\n  height: 30px;\n  background: transparent;\n  outline: none;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  cursor: pointer;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${colors.blue};\n  border-radius: 40px;\n  padding: 10px 100px;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 1.35;\n  letter-spacing: 0.04em;\n  color: ${colors.white};\n  border: none;\n  :hover {\n    transform: scale(1.02);\n    background: ${colors.grBlue};\n    transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n  }\n\n  @media screen and (min-width: ${breakPoints.tablet}) {\n    padding: 10px 201px;\n  }\n`;\n\nexport const Subtitle = styled.p`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.33;\n  color: ${colors.gray};\n  text-align: center;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  font-size: 12px;\n  line-height: 1.33;\n  color: ${colors.red};\n`;\n\nexport const PasswordMessage = styled.div`\n  font-size: 12px;\n  line-height: 1.33;\n  color: ${colors.green};\n`;\n\nexport const ErrorEmailIcon = styled(BsXLg)`\n  fill: ${colors.red};\n  width: 16px;\n  height: 16px;\n`;\n\nexport const SecuredPasswordIcon = styled(BsCheck)`\n  fill: ${colors.green};\n  width: 24px;\n  height: 28px;\n`;\n\nexport const CloseEyeIcon = styled(BsEyeSlash)`\n  fill: ${colors.blue};\n  width: 24px;\n  height: 24px;\n`;\n\nexport const OpenEyeIcon = styled(BsEye)`\n  fill: ${colors.blue};\n  width: 24px;\n  height: 24px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { register } from 'redux/auth/operations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  CloseEyeIcon,\n  OpenEyeIcon,\n  FormTitle,\n  Forms,\n  Input,\n  Label,\n  IconButton,\n  Subtitle,\n  Button,\n  Error,\n  PasswordMessage,\n} from '../LoginForm/LoginForm.styled';\n\nexport const RegisterForm = () => {\n  const [type, setType] = useState('password');\n  const [typeConfirm, setTypeConfirm] = useState('password');\n  const [toggleIconPass, setToggleIconPass] = useState(<CloseEyeIcon />);\n  const [toggleIconConfirmPass, setToggleIconConfirmPass] = useState(\n    <CloseEyeIcon />\n  );\n\n  const initialValues = {\n    email: '',\n    password: '',\n    confirmPassword: '',\n  };\n\n  const dispatch = useDispatch();\n\n  const togglePassInput = () => {\n    if (type === 'password') {\n      setType('text');\n      setToggleIconPass(<OpenEyeIcon />);\n    } else {\n      setType('password');\n      setToggleIconPass(<CloseEyeIcon />);\n    }\n  };\n\n  const toggleConfirmPassInput = () => {\n    if (typeConfirm === 'password') {\n      setTypeConfirm('text');\n      setToggleIconConfirmPass(<OpenEyeIcon />);\n    } else {\n      setTypeConfirm('password');\n      setToggleIconConfirmPass(<CloseEyeIcon />);\n    }\n  };\n\n  const registrationValidationSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Email is required'),\n    password: Yup.string()\n      .nullable()\n      .required('Password is required')\n      .min(6, 'Password must have at least 6 characters')\n      .max(16, 'Password must no more than 16 characters')\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n        'Must be at least one lowercase and uppercase letter, one number'\n      ),\n    confirmPassword: Yup.string()\n      .nullable()\n      .when('password', (password, schema) => {\n        return password\n          ? schema\n              .required('Password confirmation required')\n              .oneOf([Yup.ref('password')], 'Passwords must match')\n          : schema.notRequired();\n      }),\n  });\n\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(\n      register({\n        email,\n        password,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={initialValues}\n      validationSchema={registrationValidationSchema}\n    >\n      {({ errors, touched }) => (\n        <Forms autoComplete=\"off\">\n          <FormTitle>Registration </FormTitle>\n          <Label>\n            <Input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              valid={touched.email && !errors.email ? 'true' : undefined}\n              error={touched.email && errors.email}\n            />\n            <Error name=\"email\" component=\"div\" />\n          </Label>\n          <Label>\n            <Input\n              type={type}\n              name=\"password\"\n              placeholder=\"Password\"\n              valid={touched.password && !errors.password ? 'true' : undefined}\n              error={touched.password && errors.password}\n            />\n\n            <IconButton type=\"button\" onClick={togglePassInput}>\n              {toggleIconPass}\n            </IconButton>\n            {touched.password && !errors.password ? (\n              <PasswordMessage>Password is secure</PasswordMessage>\n            ) : (\n              <Error name=\"password\" component=\"div\" />\n            )}\n          </Label>\n          <Label>\n            <Input\n              type={typeConfirm}\n              name=\"confirmPassword\"\n              placeholder=\"ConfirmPassword\"\n              valid={\n                touched.confirmPassword && !errors.confirmPassword\n                  ? 'true'\n                  : undefined\n              }\n              error={touched.confirmPassword && errors.confirmPassword}\n            />\n            <IconButton type=\"button\" onClick={toggleConfirmPassInput}>\n              {toggleIconConfirmPass}\n            </IconButton>\n            {touched.confirmPassword && errors.confirmPassword ? (\n              <Error name=\"confirmPassword\" component=\"div\" />\n            ) : null}\n          </Label>\n\n          <Button type=\"submit\">Registration</Button>\n          <Subtitle>\n            Already have an account?\n            <NavLink\n              to=\"/login\"\n              style={{ color: '#54ADFF', marginLeft: '4px' }}\n            >\n              Login\n            </NavLink>\n          </Subtitle>\n        </Forms>\n      )}\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/Autorization/RegisterForm/RegisterForm';\nimport { Container } from 'components/ReusableComponents/MainContainer/MainContainer.styled';\n\nexport const RegisterPage = () => {\n  return (\n    <Container>\n      <RegisterForm />\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["FormTitle","styled","colors","breakPoints","Forms","Form","Input","Field","props","valid","error","Label","IconButton","Button","Subtitle","Error","ErrorMessage","PasswordMessage","ErrorEmailIcon","BsXLg","SecuredPasswordIcon","BsCheck","CloseEyeIcon","BsEyeSlash","OpenEyeIcon","BsEye","RegisterForm","useState","type","setType","typeConfirm","setTypeConfirm","toggleIconPass","setToggleIconPass","toggleIconConfirmPass","setToggleIconConfirmPass","dispatch","useDispatch","togglePassInput","toggleConfirmPassInput","registrationValidationSchema","Yup","shape","email","required","password","nullable","min","max","matches","confirmPassword","when","schema","oneOf","notRequired","onSubmit","resetForm","register","initialValues","validationSchema","errors","touched","autoComplete","name","placeholder","undefined","component","onClick","to","style","color","marginLeft","RegisterPage"],"sourceRoot":""}