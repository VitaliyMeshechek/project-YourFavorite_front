{"version":3,"file":"static/js/657.2bcff155.chunk.js","mappings":"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","sources":["components/Autorization/LoginForm/LoginForm.styled.js","components/Autorization/LoginForm/LoginForm.js","pages/LoginPage/LoginPage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport { colors, breakPoints } from 'base-styles/variables';\nimport { BsXLg, BsCheck, BsEyeSlash, BsEye } from 'react-icons/bs';\n\nexport const FormTitle = styled.h2`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 1.37;\n  color: ${colors.black};\n  text-align: center;\n  margin: 0;\n  margin-bottom: 40px;\n\n  @media screen and (min-width: ${breakPoints.tablet}) {\n    font-size: 36px;\n    line-height: 1.36;\n  }\n`;\n\nexport const Forms = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  background-color: ${colors.white};\n  gap: 24px;\n  text-align: center;\n  margin: 100px auto 0;\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n  border-radius: 20px;\n  padding: 40px 12px;\n\n  @media screen and (min-width: ${breakPoints.tablet}) {\n    padding: 60px 75px;\n    width: 608px;\n    margin: 140px auto 0;\n    border-radius: 40px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  height: 48px;\n  padding: 12px 16px;\n  font-size: 16px;\n  background-color: transparent;\n  border: 1px solid;\n  border-color: ${colors.blue};\n  border-radius: 40px;\n  outline: none;\n\n  :hover svg {\n    fill: ${colors.yellow};\n  }\n  ${props =>\n    props.valid &&\n    `border-color : ${colors.green};\n  `}\n\n  ${props =>\n    props.error &&\n    `border-color: ${colors.red};\n  `}\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  color: ${colors.gray};\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const IconButton = styled.button`\n  position: absolute;\n  border: none;\n  top: 12px;\n  right: 12px;\n  width: 30px;\n  height: 30px;\n  background: transparent;\n  outline: none;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  cursor: pointer;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${colors.blue};\n  border-radius: 40px;\n  padding: 10px 100px;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 1.35;\n  letter-spacing: 0.04em;\n  color: ${colors.white};\n  border: none;\n  :hover {\n    transform: scale(1.02);\n    background: ${colors.grBlue};\n    transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n  }\n\n  @media screen and (min-width: ${breakPoints.tablet}) {\n    padding: 10px 201px;\n  }\n`;\n\nexport const Subtitle = styled.p`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.33;\n  color: ${colors.gray};\n  text-align: center;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  font-size: 12px;\n  line-height: 1.33;\n  color: ${colors.red};\n`;\n\nexport const PasswordMessage = styled.div`\n  font-size: 12px;\n  line-height: 1.33;\n  color: ${colors.green};\n`;\n\nexport const ErrorEmailIcon = styled(BsXLg)`\n  fill: ${colors.red};\n  width: 16px;\n  height: 16px;\n`;\n\nexport const SecuredPasswordIcon = styled(BsCheck)`\n  fill: ${colors.green};\n  width: 24px;\n  height: 28px;\n`;\n\nexport const CloseEyeIcon = styled(BsEyeSlash)`\n  fill: ${colors.blue};\n  width: 24px;\n  height: 24px;\n`;\n\nexport const OpenEyeIcon = styled(BsEye)`\n  fill: ${colors.blue};\n  width: 24px;\n  height: 24px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { logIn } from 'redux/auth/operations';\nimport {\n  FormTitle,\n  Forms,\n  Label,\n  Input,\n  IconButton,\n  Button,\n  Subtitle,\n  Error,\n  PasswordMessage,\n  ErrorEmailIcon,\n  SecuredPasswordIcon,\n  CloseEyeIcon,\n  OpenEyeIcon,\n} from './LoginForm.styled';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [type, setType] = useState('password');\n  const [toggleIconPass, setToggleIconPass] = useState(<CloseEyeIcon />);\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Email is required'),\n    password: Yup.string()\n      .nullable()\n      .required('Password is required')\n      .min(6, 'Password must have at least 6 characters')\n      .max(16, 'Password must have no more than 16 characters')\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n        'Must have at least one lowercase and uppercase letter, and one number'\n      ),\n  });\n\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(\n      logIn({\n        email,\n        password,\n      })\n    );\n    resetForm();\n  };\n\n  const togglePassInput = () => {\n    if (type === 'password') {\n      setType('text');\n      setToggleIconPass(<OpenEyeIcon />);\n    } else {\n      setType('password');\n      setToggleIconPass(<CloseEyeIcon />);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ errors, touched }) => (\n        <Forms autoComplete=\"off\">\n          <FormTitle>Login </FormTitle>\n          <Label>\n            <Input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              valid={touched.email && !errors.email ? 'true' : undefined}\n              error={touched.email && errors.email}\n            />\n\n            {touched.email && errors.email && (\n              <>\n                <IconButton>\n                  <ErrorEmailIcon />\n                </IconButton>\n                <Error name=\"email\" component=\"div\" />\n              </>\n            )}\n            {touched.email && !errors.email && (\n              <>\n                <IconButton />\n              </>\n            )}\n          </Label>\n\n          <Label>\n            <Input\n              type={type}\n              name=\"password\"\n              placeholder=\"Password\"\n              valid={touched.password && !errors.password ? 'true' : undefined}\n              error={touched.password && errors.password}\n            />\n\n            {touched.password && !errors.password ? (\n              <>\n                <PasswordMessage>Password is secure</PasswordMessage>\n                <IconButton>\n                  <SecuredPasswordIcon />\n                </IconButton>\n              </>\n            ) : (\n              <>\n                <Error name=\"password\" component=\"div\" />\n                <IconButton type=\"button\" onClick={togglePassInput}>\n                  {toggleIconPass}\n                </IconButton>\n              </>\n            )}\n          </Label>\n\n          <Button type=\"submit\">Login</Button>\n\n          <Subtitle>\n            Don't have an account?\n            <NavLink\n              to=\"/register\"\n              style={{ color: '#54ADFF', marginLeft: '4px' }}\n            >\n              Register\n            </NavLink>\n          </Subtitle>\n        </Forms>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","import { LoginForm } from '../../components/Autorization/LoginForm/LoginForm';\nimport { Container } from 'components/ReusableComponents/MainContainer/MainContainer.styled';\n\nconst LoginPage = () => {\n  return (\n    <Container>\n      <LoginForm />\n    </Container>\n  );\n};\n\nexport default LoginPage;\n"],"names":["FormTitle","styled","colors","breakPoints","Forms","Form","Input","Field","props","valid","error","Label","IconButton","Button","Subtitle","Error","ErrorMessage","PasswordMessage","ErrorEmailIcon","BsXLg","SecuredPasswordIcon","BsCheck","CloseEyeIcon","BsEyeSlash","OpenEyeIcon","BsEye","LoginForm","dispatch","useDispatch","useState","type","setType","toggleIconPass","setToggleIconPass","validationSchema","Yup","shape","email","required","password","nullable","min","max","matches","togglePassInput","initialValues","onSubmit","resetForm","logIn","errors","touched","autoComplete","name","placeholder","undefined","component","onClick","to","style","color","marginLeft"],"sourceRoot":""}